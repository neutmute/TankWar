@{
    ViewBag.Title = "Tank War Gamepad";
}

<div class="row" data-bind="visible: stateWaitingForName">
    <form class="form-horizontal">
        <input type="text" class="input-large"  placeholder="What is your name soldier?" data-bind="value:name">
        <button type="submit" class="btn" data-bind="click: setName">Sir, Yes, Sir!</button>
    </form>
</div>

<span data-bind="visible: stateGameInPlay">
    <div class="row">
        <div class="span2">
            <div class="row">
                <div class="span2">
                    <div id="sliderAngle" data-bind="slider:angle"></div>        
                </div>
            </div>
            <div class="row">
                <div class="span2"><br />
                    Power:<span data-bind="text:power"></span><br />
                    Angle:<span data-bind="text:angle"></span>
                </div>
            </div>
        </div>
        <div class="span2">
        
            <div id="sliderPower" data-bind="slider:power"></div>
        </div>
    </div>
    <div class="row">
        <div class="span4">
            <button class="btn btn-danger btn-large" data-bind="click:shoot"><i class="icon-white icon-arrow-up"></i> Fire!</button>
        </div>
    </div>
</span>

@section Scripts {
    <script>
        ko.bindingHandlers.slider = {            
            init: function(element, valueAccessor, allBindingsAccessor) {
                var options = allBindingsAccessor().sliderOptions || {};
                $(element).slider(options);
                ko.utils.registerEventHandler(element, "slidechange", function(event, ui) {
                    var observable = valueAccessor();
                    observable(ui.value);
                });
                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                    $(element).slider("destroy");
                });
                ko.utils.registerEventHandler(element, "slide", function(event, ui) {
                    var observable = valueAccessor();
                    observable(ui.value);
                });
            },

            update: function(element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());
                if (isNaN(value)) value = 0;
                $(element).slider("value", value);

            }
        };

        function gamepadViewModel() {
            var self = this;
            this.hub = $.connection.gamepadHub;
            this.name = ko.observable();
            this.power = ko.observable(0);
            this.angle = ko.observable(90);
            this.playerStatus = ko.observable();

            self.stateWaitingForName = ko.computed(function() {
                return self.playerStatus() == 0;
            });

            self.stateGameInCountdown = ko.computed(function() {
                return self.playerStatus() == 1;
            });

            self.stateGameInPlay = ko.computed(function() {
                return self.playerStatus() == 2;
            });

            self.stateWaitingForNextGame = ko.computed(function() {
                return self.playerStatus() == 3;
            });

            this.init = function() {
                this.hub.server.ping()
                    .done(this.updatePlayerStatus)
                    .fail(this.handleError);
            }

            this.updatePlayerStatus = function(status) {
                console.log('playerStatus=' + status);
                self.playerStatus(status);
            }
            
            this.handleError = function (error) {
                console.warn(error);
            }

            this.setName = function() {
                this.hub.server.setName(this.name())
                    .done(this.updatePlayerStatus)
                    .fail(this.handleError);
            }

            this.shoot = function() {
                this.hub.server.shoot(this.power(), this.angle())
                    .done(function() {
                        console.log('Kapoom!');
                    }).fail(this.handleError);
            }

        }

        $(function() {
            $("#sliderPower").slider({
                orientation: "vertical",
                range: "min",
                min: 0,
                max: 100,
                value: 60
            });

            $("#sliderAngle").slider({
                range: "min",
                min: 0,
                max: 180,
                value: 90
            });
        }
        );

        var viewModel = new gamepadViewModel();
        ko.applyBindings(viewModel);

        $.connection.hub.start().done(function() {
            viewModel.init();
        });
    </script>
}