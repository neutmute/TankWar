@{
    ViewBag.Title = "Tank War Gamepad";
}

<div style="display:none" data-bind="visible:true">
    <div class="row" data-bind="visible: stateWaitingForName">
        <form class="form-horizontal">
            <input type="text" class="input-large"  placeholder="What is your name soldier?" data-bind="value:name">
            <button type="submit" class="btn" data-bind="click: setName">Sir, Yes, Sir!</button>
        </form>
    </div>

    <div class="row" data-bind="visible: stateGameInCountdown">
        <h3>Hostilities are commencing in <span data-bind="text: countdown"></span></h3>
        <img src="@Url.Content("~/Content/images/countdown.jpg")" />
    </div>

    <div data-bind="visible: stateGameInPlay">
        <div class="row">
            <div class="span2">
                <div class="row">
                    <div class="span2">
                        <div id="sliderAngle" data-bind="slider:angle"></div>        
                    </div>
                </div>
                <div class="row">
                    <div class="span2"><br />
                        Angle:<span data-bind="text: angle"></span><br />
                        Power:<span data-bind="text:power"></span>
                    </div>
                </div>
            </div>
            <div class="span2">
                <div id="sliderPower" data-bind="slider:power"></div>
            </div>
        </div>
        <div class="row">
            <div class="span4">
                <button class="btn btn-danger btn-large" data-bind="click:shoot"><i class="icon-white icon-arrow-up"></i> Fire!</button>
            </div>
        </div>
    </div>
    
    <div class="row" data-bind="visible: stateGameOver">
        <img src="@Url.Content("~/Content/images/gameover.gif")" />
    </div>
    
    <div class="row" data-bind="visible: stateWaitingForNextGame">
        <h4>You are late, the battle has already started!</h4>
        <img src="@Url.Content("~/Content/images/inProgress.jpg")" />
        <h6>Don't worry, reinforcements will be required soon</h6>
    </div>

</div>
@section Scripts {
    <script src="~/Scripts/Custom/ko.bindings.js"></script>
    <script>
        
        function gamepadViewModel() {
            var self = this;
            this.hub = $.connection.gamepadHub;
            this.name = ko.observable();
            this.power = ko.observable(0);
            this.angle = ko.observable(0);
            this.countdown = ko.observable('');
            this.playerStatus = ko.observable();
            this.gameStatus = ko.observable();
            var connected = false;

            self.stateWaitingForName = ko.computed(function() { return self.playerStatus() == 'WaitingForName'; });
            self.stateGameInCountdown = ko.computed(function() { return self.playerStatus() == 'GameInCountdown'; });
            self.stateGameInPlay = ko.computed(function() { return self.playerStatus() == 'GameInPlay'; });
            self.stateGameOver = ko.computed(function() { return self.playerStatus() == 'Dead'; });
            self.stateWaitingForNextGame = ko.computed(function() { return self.playerStatus() == 'WaitingForNextGame'; });

            this.init = function() {
                this.hub.server.ping()
                    .done(this.receivePlayerStatus)
                    .fail(this.handleError);

                connected = true;
            }

            this.sendTurretStatus = function() {
                if (connected) {
                    self.hub.server.setTurret(self.power(), self.angle())
                        .fail(self.handleError);
                }
            }

            this.receivePlayerStatus = function(status) {
                console.log('playerStatus=' + status);
                self.playerStatus(status);
            }

            this.handleError = function(error) {
                console.warn(error);
            }

            this.setName = function() {
                this.hub.server.setName(this.name())
                    .done(this.updatePlayerStatus)
                    .fail(this.handleError);
            }

            this.shoot = function() {
                this.hub.server.fire()
                    .done(function() {
                        console.log('Kapoom!');
                    }).fail(this.handleError);
            }

            this.notifyGameStatus = function(gameStatus, countdownValue) {
                console.log("gameStatus=" + gameStatus + ", countdownValue=" + countdownValue);
                self.gameStatus(gameStatus);
                self.countdown(countdownValue);
            }

            this.angle.subscribe(self.sendTurretStatus);
            this.power.subscribe(self.sendTurretStatus);

        }


        $(document).ready(function() {

            var viewModel = new gamepadViewModel();
            ko.applyBindings(viewModel);

            $("#sliderPower").slider({
                orientation: "vertical",
                range: "min",
                min: 0,
                max: 100,
                value: 60
            });

            $("#sliderAngle").slider({
                range: "min",
                min: 0,
                max: 180,
                value: 90
            });

            $.connection.gamepadHub.client.notifyGameStatus = viewModel.notifyGameStatus;
            $.connection.gamepadHub.client.receivePlayerStatus = viewModel.receivePlayerStatus;

            $.connection.hub.start().done(function() {
                viewModel.init();
            });
        });
    </script>
}