@using TankWar.Models
@model ViewPortModel
@{
    ViewBag.Title = "Tank War View Port";
}

<style>.sjs{border:2px #999 solid;}</style>


<h5>Tank War View Port</h5>

<div class="row">
    <div class="span10" id="sceneDiv"></div>
    <div class="span2"></div>
</div>
@section Scripts {
    <script src="~/Scripts/sprite.js"></script>
    
    <script>
        //http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format
        if (!String.prototype.format) {
            String.prototype.format = function() {
                var args = arguments;
                return this.replace(/{(\d+)}/g, function(match, number) {
                    return typeof args[number] != 'undefined'
                        ? args[number]
                        : match;
                });
            };
        }

        function TankModel(sprite) {
            var self = this;
            var _sprite = sprite;

            this.setTurret = function(tankModel) {
                
                if (_sprite.isAnimating) {
                    return;
                }

                if (tankModel.Setting.Angle < 23) {
                    _sprite.setXOffset(5);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(1);
                } else if (tankModel.Setting.Angle < 68) {
                    _sprite.setXOffset(260);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(-1);
                } else if (tankModel.Setting.Angle < 113) {
                    _sprite.setXOffset(297);
                    _sprite.setYOffset(6);

                } else if (tankModel.Setting.Angle < 158) {
                    _sprite.setXOffset(260);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(1);
                } else {
                    _sprite.setXOffset(5);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(-1);
                }
            }
        }

        function sceneControllerClass() {


            var tankSpriteUrl = '@Url.Content("~/Content/Sprites/Tank1.gif")';
            var self = this;
            var scene = null;
            var tankLayer = null;
            var tankSprites = [];
            var shellSprites = sjs.List();
            var shellCycle = null;
            var cycleTicker = null;
            var cycleList;


            this.cycleAnimations = function() {
                var cycle;
                while (cycle = self.cycleList.iterate()) {
                    cycle.next();
                    if (cycle.done) {
                        //for (var i=0;i<cycle.sprites.length;i++) {
                        //    cycle.sprites.isAnimating = false;
                        //}
                        cycle.reset();
                        self.cycleList.remove(cycle);
                    }
                    cycle.update();
                }
            }

            this.animateTankFiring = function(tankSprite) {
                var tankFiringCycle = sjs.Cycle([[5, 6, 1],
                    [55, 6, 10],
                    [100, 6, 10],
                    [145, 6, 5],
                    [190, 6, 5]]);


                tankFiringCycle.repeat = false;
                tankFiringCycle.addSprite(tankSprite);
                tankSprite.isAnimating = true;
                self.cycleList.add(tankFiringCycle);
            }

            this.initScene = function() {
                if (self.scene != null) {
                    self.scene.reset();
                } else {
                    self.scene = sjs.Scene({ w: @Model.ViewSize.BottomRight.X, h: @Model.ViewSize.BottomRight.Y, parent: document.getElementById('sceneDiv'), autoPause: false });
                }

                self.scene.loadImages([tankSpriteUrl], function() {

                    self.tankLayer = self.scene.Layer("layer", { useCanvas: false });                   


                    self.shellCycle = sjs.Cycle([[238, 26, 5], [250, 26, 5]]);

                    var tankDeathCycle = sjs.Cycle([[18, 52, 5],
                        [61, 52, 5],
                        [101, 52, 3],
                        [143, 52, 3],
                        [183, 52, 3],
                        [183, 52, 3],
                        [222, 52, 3],
                        [261, 52, 3],
                        [297, 52, 3]]);

                    //var tankTurningCycle = sjs.Cycle([[5, 6, 1],
                    //    [260, 6, 10],
                    //    [296, 6, 10]]);
                    tankDeathCycle.repeat = false;

                    //  tankDeathCycle.addSprite(tankSprites[0]);
                    //   tankFiringCycle.addSprite(tankSprites[1]);

                    // cycleList.add(tankFiringCycle);
                    //   cycleList.add(tankDeathCycle);


                    self.cycleList = sjs.List();
                    cycleTicker = self.scene.Ticker(30, self.cycleAnimations);
                    cycleTicker.run();

                });
            }

            this.startGame = function(viewState) {

                console.log('startGame with ' + viewState.Tanks.length + ' tanks');

                self.initScene();
            }


            this.tick = function(viewState) {
                // support late comers arriving after game in play
                if (self.scene == null) {
                    self.initScene();
                }

                // loop through tank sprites
                for (var spriteIndex = 0; spriteIndex < tankSprites.length; spriteIndex++) {
                    var sprite = tankSprites[spriteIndex];
                    var viewStateTank = null;

                    for (var i = viewState.Tanks.length - 1; i > -1; i--) {
                        var viewStateTankCandidate = viewState.Tanks[i];
                        if (sprite.serverId == viewStateTankCandidate.Id) {
                            viewStateTank = viewStateTankCandidate;
                            viewState.Tanks.splice(i, 1); // remove that found tank from view state
                        }
                    }

                    if (viewStateTank == null) {
                        sprite.remove();
                        sprite.update();
                        console.log('removing tank sprite ' + sprite.serverId);
                    } else {

                        //console.log('Updating tank ' + sprite.serverId);
                        sprite.setX(viewStateTank.Point.X);
                        sprite.setY(viewStateTank.Point.Y);

                        var tankModel = new TankModel(sprite);
                        tankModel.setTurret(viewStateTank);
                        if (viewStateTank.IsFiring) {
                       //     self.animateTankFiring(sprite);
                        }
                        sprite.update();
                    }
                }

                // left over tanks need to be created and added to the scene
                for (var i = viewState.Tanks.length - 1; i > -1; i--) {
                    var viewStateTank = viewState.Tanks[i];
                    var tankSprite = self.scene.Sprite(tankSpriteUrl, self.tankLayer);
                    tankSprite.size(43, 40);
                    tankSprite.setXOffset(5);
                    tankSprite.setYOffset(6);
                    
                    var x = viewStateTank.Point.X;
                    var y = viewStateTank.Point.Y;
                    
                    var imageUrl = '@Url.Content("~/Content/GetNameImage.ashx?text=")';
                    var nameSprite = self.scene.Sprite(imageUrl + viewStateTank.Name, self.tankLayer);
                  
                    tankSprite.move(x, y);
                    tankSprite.serverId = viewStateTank.Id;

                    tankSprites.push(tankSprite);
                    tankSprite.update();
                    
                    nameSprite.size(50, 16);
                    nameSprite.move(x, y + 40);
                    nameSprite.update();
                    console.log("Added tank {0} at {1},{2}".format(viewStateTank.Id, x, y));
                }

                var shellSprite;
                while (shellSprite = shellSprites.iterate()) {
                    var viewStateShell = null;

                    for (var i = viewState.Shells.length - 1; i > -1; i--) {
                        var viewStateShellCandidate = viewState.Shells[i];
                        if (shellSprite.serverId == viewStateShellCandidate.Id) {
                            viewStateShell = viewStateShellCandidate;
                            viewState.Shells.splice(i, 1); // remove from viewstate
                        }
                    }

                    if (viewStateShell == null || viewStateShell.IsDead) {
                        console.log("Removing shell {0}".format(shellSprite.serverId));
                        shellSprites.remove(shellSprite);
                        shellSprite.remove();
                    } else {

                        var x = viewStateShell.Point.X;
                        var y = viewStateShell.Point.Y;
                        shellSprite.setX(x);
                        shellSprite.setY(y);
                        //self.shellCycle.addSprite(shellSprite);

                       // console.log('Moving shell ' + shellSprite.serverId + ' (' + x + ',' + y + ')');
                        shellSprite.update();
                    }
                }

                // left over shells are new and need to be created and added to the scene
                for (var i = viewState.Shells.length - 1; i > -1; i--) {
                    var viewStateShell = viewState.Shells[i];

                    if (!viewStateShell.IsDead) {
                        shellSprite = self.scene.Sprite(tankSpriteUrl, self.tankLayer);
                        shellSprite.size(8, 8);

                        shellSprite.setXOffset(238);
                        shellSprite.setYOffset(26);

                        var x = viewStateShell.Point.X;
                        var y = viewStateShell.Point.Y;
                        shellSprite.move(x, y);
                        shellSprite.serverId = viewStateShell.Id;

                        shellSprites.add(shellSprite);
                        shellSprite.update();
                        console.log('Added shell ' + shellSprite.serverId + ' (' + x + ',' + y + ')');
                    }
                }


            };
        }


        $(document).ready(function() {


            var sceneController = new sceneControllerClass();

            $.connection.viewPortHub.client.startGame = sceneController.startGame;

            $.connection.viewPortHub.client.tick = sceneController.tick;

            $.connection.hub.start().done(function() {
                console.log("started hub!");
                $.connection.viewPortHub.server.ping();
            });


        });

    </script>
}