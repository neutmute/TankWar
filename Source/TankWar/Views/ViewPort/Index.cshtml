@using TankWar.Models
@model ViewPortModel
@{
    ViewBag.Title = "View Port";
}

<style>.sjs{border:2px #999 solid;}</style>

<h5>View Port</h5>
<div class="row">
    <div class="span10" id="sceneDiv"></div>
</div>
<div class="row">
    <ul data-bind="foreach: messages">
        <li data-bind="text: Text"></li>
    </ul>
</div>
    
@section Scripts {
    <script src="~/Scripts/custom/sprite.js"></script>
    <script src="~/Scripts/custom/util.js"></script>
    <script>

        function TankModel(sprite) {
            var self = this;
            var _sprite = sprite;

            this.setTurret = function(tankModel) {

                if (_sprite.isAnimating) {
                    return;
                }

                if (tankModel.Turret.Angle < 23) {
                    _sprite.setXOffset(5);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(1);
                } else if (tankModel.Turret.Angle < 68) {
                    _sprite.setXOffset(260);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(-1);
                } else if (tankModel.Turret.Angle < 113) {
                    _sprite.setXOffset(297);
                    _sprite.setYOffset(6);

                } else if (tankModel.Turret.Angle < 158) {
                    _sprite.setXOffset(260);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(1);
                } else {
                    _sprite.setXOffset(5);
                    _sprite.setYOffset(6);
                    _sprite.setXScale(-1);
                }
            }
        }
        
        function DashboardControllerClass(){
            
            var self = this;
            self.messages = ko.observableArray();  
                                             
            self.receiveMessage = function(message) {
                self.messages.push(message);
            }
        }

        function SceneControllerClass() {


            var tankSpriteUrl = '@Url.Content("~/Content/Sprites/tank.gif")';

            var self = this;
            var scene = null;
            var tankLayer = null;
            var tankSprites = [];
            var shellSprites = [];
            var shellCycle = null;
            var cycleTicker = null;
            var cycleList;


            this.cycleAnimations = function() {
                var cycle;
                while (cycle = self.cycleList.iterate()) {
                    cycle.next();
                    //if (cycle.done) {
                    //    //for (var i=0;i<cycle.sprites.length;i++) {
                    //    //    cycle.sprites.isAnimating = false;
                    //    //}
                    //    cycle.reset();
                    //    self.cycleList.remove(cycle);
                    //}
                    cycle.update();
                }
            }

            this.animateTankFiring = function(tankSprite) {
                var tankFiringCycle = sjs.Cycle([[5, 6, 1],
                    [55, 6, 10],
                    [100, 6, 10],
                    [145, 6, 5],
                    [190, 6, 5]]);

                tankFiringCycle.repeat = false;
                tankFiringCycle.addSprite(tankSprite);
                tankSprite.isAnimating = true;
                self.cycleList.add(tankFiringCycle);
            }

            this.animateTankDeath = function(tankSprite) {

                var tankDeathCycle = sjs.Cycle([
                    //[18, 52, 5],
                    [61, 52,    3],
                    [101, 52,   3],
                    [143, 52,   3],
                    [183, 52,   3],
                    [183, 52,   3],
                    [222, 52,   3],
                    [261, 52,   3],
                    [297, 52,   3],
                    [297, 102,  3] // blank the last
                ]);
                
                var deathSprite = self.scene.Sprite(tankSpriteUrl, self.tankLayer);
                deathSprite.size(43, 40);
                deathSprite.setX(tankSprite.x);
                deathSprite.setY(tankSprite.y);
                
                tankDeathCycle.addSprite(deathSprite);
                tankDeathCycle.repeat = false;
                
                tankSprite.isAnimating = true;
                self.cycleList.add(tankDeathCycle);
            }


            this.initScene = function() {
                console.log('initing scene');
                if (self.scene != null) {
                    self.scene.reset();
                } else {
                    self.scene = sjs.Scene({ w: @Model.ViewSize.X , h: @Model.ViewSize.Y , parent: document.getElementById('sceneDiv'), autoPause: false });
                }

                self.scene.loadImages([tankSpriteUrl], function() {

                self.tankLayer = self.scene.Layer("layer", { useCanvas: false });

                self.cycleList = sjs.List();
                    
                self.shellCycle = sjs.Cycle([[238, 26, 5], [250, 26, 5]]);
                self.cycleList.add(self.shellCycle);
                    
                cycleTicker = self.scene.Ticker(30, self.cycleAnimations);
                cycleTicker.run();
                console.log('inited scene');
                });
            }

            this.startGame = function(viewState) {
                console.log('startingGame with ' + viewState.Tanks.length + ' tanks');
                self.initScene();
            }

            this.gameOver = function() {
                console.log('game over');

                var bossCycle = sjs.Cycle([
                        [15, 15, 10]
                    ,   [192, 14, 10]
                    ,   [367, 13, 10]
                ]);

                var gameOverSprite = self.tankLayer.Sprite('@Url.Content("~/Content/Images/gameover2.gif")');
                gameOverSprite.size(465, 233);
                gameOverSprite.move(200, 100);
                gameOverSprite.update();

                var gameBossUrl = '@Url.Content("~/Content/Sprites/gameboss.gif")';
                var gameOverBossSprite = self.scene.Sprite(gameBossUrl, self.tankLayer);

                gameOverBossSprite.size(152, 215);
                gameOverBossSprite.move(10, 10);
              //  gameOverBossSprite.update();

                bossCycle.addSprite(gameOverBossSprite);

                self.cycleList.add(bossCycle);
            }


            this.tick = function(viewState) {
                // support late comers arriving after game in play
                if (self.scene == null) {
                    self.initScene();
                }

                // loop through tank sprites
                for (var spriteIndex = 0; spriteIndex < tankSprites.length; spriteIndex++) {
                    var sprite = tankSprites[spriteIndex];
                    var viewStateTank = null;

                    for (var i = viewState.Tanks.length - 1; i > -1; i--) {
                        var viewStateTankCandidate = viewState.Tanks[i];
                        if (sprite.serverId == viewStateTankCandidate.Id) {
                            viewStateTank = viewStateTankCandidate;
                            viewState.Tanks.splice(i, 1); // remove that found tank from view state
                        }
                    }

                    if (viewStateTank == null) {
                        console.log('removing tank sprite ' + sprite.serverId);
                        tankSprites.splice(spriteIndex, 1);
                        sprite.remove();
                    } else {

                        //console.log('Updating tank ' + sprite.serverId);
                        sprite.setX(viewStateTank.Point.X);
                        sprite.setY(viewStateTank.Point.Y);

                        var tankModel = new TankModel(sprite);
                        tankModel.setTurret(viewStateTank);
                        if (viewStateTank.IsFiring) {
                            self.animateTankFiring(sprite);
                        }
                        if (viewStateTank.IsHit) {
                            console.log("{0} is hit!".format(viewStateTank.Name));
                            self.animateTankDeath(sprite);
                        }

                        if (!sprite.isAnimating) {
                            sprite.update();
                        }
                    }
                }

                // left over tanks need to be created and added to the scene
                for (var i = viewState.Tanks.length - 1; i > -1; i--) {
                    var viewStateTank = viewState.Tanks[i];
                    var tankSprite = self.scene.Sprite(tankSpriteUrl, self.tankLayer);
                    tankSprite.size(43, 40);
                    tankSprite.setXOffset(5);
                    tankSprite.setYOffset(6);

                    var x = viewStateTank.Point.X;
                    var y = viewStateTank.Point.Y;

                    var imageUrl = '@Url.Content("~/Content/GetNameImage.ashx?text=")';
                    var nameSprite = self.scene.Sprite(imageUrl + viewStateTank.Name, self.tankLayer);

                    tankSprite.move(x, y);
                    tankSprite.serverId = viewStateTank.Id;

                    tankSprites.push(tankSprite);
                    tankSprite.update();

                    nameSprite.size(50, 16);
                    nameSprite.move(x, y + 40);
                    nameSprite.update();
                    console.log("Added tank {0} at {1},{2}".format(viewStateTank.Id, x, y));
                }

               
                for (var shellSpriteIndex = shellSprites.length - 1; shellSpriteIndex > -1; shellSpriteIndex--) {
                    var viewStateShell = null;
                    var shellSprite = shellSprites[shellSpriteIndex];

                    for (var i = viewState.Shells.length - 1; i > -1; i--) {
                        var viewStateShellCandidate = viewState.Shells[i];
                        if (shellSprite.serverId == viewStateShellCandidate.Id) {
                            viewStateShell = viewStateShellCandidate;
                            viewState.Shells.splice(i, 1); // remove from viewstate
                        }
                    }

                    if (viewStateShell == null || viewStateShell.IsDead) {
                        console.log("Removing shell {0}".format(shellSprite.serverId));
                        shellSprites.splice(shellSpriteIndex, 1);
                        self.shellCycle.removeSprite(shellSprite);
                        shellSprite.remove();
                    } else {

                        var x = viewStateShell.Point.X;
                        var y = viewStateShell.Point.Y;
                        shellSprite.setX(x);
                        shellSprite.setY(y);
                        // console.log('Moving shell ' + shellSprite.serverId + ' (' + x + ',' + y + ')');
                        shellSprite.update();
                    }
                }

                // left over shells are new and need to be created and added to the scene
                for (var i = viewState.Shells.length - 1; i > -1; i--) {
                    var viewStateShell = viewState.Shells[i];

                    if (!viewStateShell.IsDead) {
                        shellSprite = self.scene.Sprite(tankSpriteUrl, self.tankLayer);
                        shellSprite.size(8, 8);

                        shellSprite.setXOffset(238);
                        shellSprite.setYOffset(26);

                        var x = viewStateShell.Point.X;
                        var y = viewStateShell.Point.Y;
                        shellSprite.move(x, y);
                        shellSprite.serverId = viewStateShell.Id;
                        shellSprite.update();

                        shellSprites.push(shellSprite);
                        self.shellCycle.addSprite(shellSprite);
                        console.log('Added shell ' + shellSprite.serverId + ' (' + x + ',' + y + ')');
                    }
                }


            };
        }


        $(document).ready(function() {
            
            var viewModel = new DashboardControllerClass();
            ko.applyBindings(viewModel);
            
            var sceneController = new SceneControllerClass();

            $.connection.viewPortHub.client.startGame = sceneController.startGame;

            $.connection.viewPortHub.client.gameOver = sceneController.gameOver;

            $.connection.viewPortHub.client.tick = sceneController.tick;
            
            $.connection.viewPortHub.client.receiveMessage = viewModel.receiveMessage;
            
            $.connection.hub.start().done(function() {
                console.log("Hub started");
                $.connection.viewPortHub.server.ping();
            });

            
        });

    </script>
}