@using TankWar.Models
@model ViewPortModel
@{
    ViewBag.Title = "Tank War View Port";
}

<style>.sjs{border:2px #999 solid;}</style>


<h2>Tank War View Port</h2>

<div class="row">
    <div class="span10" id="sceneDiv"></div>
    <div class="span2"></div>
</div>
@section Scripts {
    <script src="~/Scripts/sprite.js"></script>
    
    <script>
        function sceneControllerClass() {


            var tankSpriteUrl = '@Url.Content("~/Content/Sprites/Tank1.gif")';
            var self = this;
            var scene = null;
            var tankSprites = [];
            var cycleTicker = null;
            var cycleList = sjs.List();
            
            
            this.cycleAnimations = function() {
                var cycle;
                console.log('cylcingticker');
                while(cycle = cycleList.iterate()) {
                    cycle.next();
                    if (cycle.done) {
                        cycle.reset();
                        cycleList.remove(cycle);
                    }
                    cycle.update();
                }
            }
            
            this.startGame = function(viewState) {

                console.log('startGame');

                if (scene != null) {
                    scene.reset();
                }

                scene = sjs.Scene({ w: @Model.ViewSize.BottomRight.X, h: @Model.ViewSize.BottomRight.Y, parent: document.getElementById('sceneDiv'), autoPause:false });

                scene.loadImages([tankSpriteUrl], function() {

                    var layer = scene.Layer("layer", { useCanvas: false });

                    // load player tanks
                    for (var i = 0; i < viewState.Tanks.length; i++) {

                        var viewStateTank = viewState.Tanks[i];
                        var tankSprite = scene.Sprite(tankSpriteUrl, layer);
                        tankSprite.size(43, 40);
                        tankSprite.setXOffset(5);
                        tankSprite.setYOffset(6);

                        tankSprite.move(viewStateTank.Point.X, viewStateTank.Point.Y);
                        tankSprite.serverId = viewStateTank.Id;

                        tankSprites.push(tankSprite);
                        tankSprite.update();
                    }
                    
                    var tankFiringCycle = sjs.Cycle([   [5, 6, 1],
                                                        [55, 6, 10],
                                                        [100, 6, 10],
                                                        [145, 6, 5],
                                                        [190, 6, 5]]);

                    tankFiringCycle.repeat = false;
                    tankFiringCycle.addSprite(tankSprites[1]);
                    cycleList.add(tankFiringCycle);
                    
                    
                    cycleTicker = scene.Ticker(30, self.cycleAnimations);
                    cycleTicker.run();

                });
            }
            

            this.tick = function(viewState) {
                console.log('tick');
                for(var spriteIndex = 0; spriteIndex < tankSprites.length; spriteIndex++) {
                    var sprite = tankSprites[spriteIndex];
                    var viewStateTank = null;
                    for (var i = 0; i < viewState.Tanks.length; i++) {
                        var viewStateTankCandidate = viewState.Tanks[i]; 
                        if (sprite.serverId == viewStateTankCandidate.Id) {
                            viewStateTank = viewStateTankCandidate;
                        }
                    }
                    if (viewStateTank == null) {
                        sprite.remove();
                        console.log('removing sprite');
                    } else {
                        sprite.setX(viewStateTank.Point.X);
                        sprite.setY(viewStateTank.Point.Y);
                        sprite.update();
                    }
                }
            };
        }


        $(function() {


            var sceneController = new sceneControllerClass();

            $.connection.viewPortHub.client.startGame = sceneController.startGame;

            $.connection.viewPortHub.client.tick = sceneController.tick;

            $.connection.hub.start().done(function() {
                console.log("started hub!");
                $.connection.viewPortHub.server.ping();
            });


        });

    </script>
}